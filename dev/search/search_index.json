{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Vertagus","text":"<p>Vertagus is a tool to enable automation around maintaining versions for your source code via a source control management tool like git. You can automate checks to compare the current code version string with version string(s) found on a specific branch of your repo or in repo tags, automate bumping based on semantic commit messages, and automate creating version tags in your git repo.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Semver version validation - Ensure your version strings follow semantic versioning</li> <li>Automated version bumping - Based on semantic commit messages or user configuration</li> <li>Multi-stage development - Support for different development stages (dev, staging, prod)</li> <li>Git tag automation - Create version tags and maintain alias tags like 'stable', 'latest'</li> <li>Flexible configuration - Support for TOML and YAML configuration formats</li> <li>Multiple manifest types - Works with various project manifest files</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<p>Install from PyPI:</p> <pre><code>pip install vertagus\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<ol> <li> <p>Initialize your project configuration:    <pre><code>vertagus init\n</code></pre></p> </li> <li> <p>Check your current version:    <pre><code>vertagus check\n</code></pre></p> </li> <li> <p>Bump your version:    <pre><code>vertagus bump\n</code></pre></p> </li> </ol>"},{"location":"#documentation-overview","title":"Documentation Overview","text":"<ul> <li>Getting Started - Learn how to set up and use Vertagus</li> <li>Configuration - Detailed configuration options</li> <li>CLI Reference - Complete command-line interface documentation</li> <li>Contributing - Contribution guide</li> <li>Examples - Real-world usage examples</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"cli-reference/","title":"CLI Reference","text":"<p>Vertagus provides a comprehensive command-line interface for version management. This page documents all available commands and their options.</p>"},{"location":"cli-reference/#global-options","title":"Global Options","text":"<p>These options are available for most commands:</p> <ul> <li><code>--config, -c PATH</code> - Path to configuration file (default: search for vertagus.yaml/yml/toml in current directory)</li> <li><code>--help</code> - Show help message and exit</li> </ul>"},{"location":"cli-reference/#commands","title":"Commands","text":""},{"location":"cli-reference/#vertagus-validate","title":"<code>vertagus validate</code>","text":"<p>Validate the current project version against configured rules.</p> <pre><code>vertagus validate [OPTIONS]\n</code></pre> <p>Options: - <code>--config, -c PATH</code> - Path to the configuration file - <code>--stage-name, -s STAGE</code> - Name of a stage to validate against - <code>--scm-branch, -b BRANCH</code> - Optional SCM branch to validate against (defaults to configured branch)</p> <p>Examples: <pre><code># Validate current version\nvertagus validate\n\n# Validate against production stage rules\nvertagus validate --stage-name prod\n\n# Validate against specific branch\nvertagus validate --scm-branch develop\n\n# Use specific configuration file\nvertagus validate --config ./my-config.yaml\n</code></pre></p> <p>Exit codes: - <code>0</code> - Validation successful - <code>1</code> - Validation failed</p>"},{"location":"cli-reference/#vertagus-bump","title":"<code>vertagus bump</code>","text":"<p>Increment the version number using configured bumpers.</p> <pre><code>vertagus bump [OPTIONS] [BUMPER_ARGS...]\n</code></pre> <p>Options: - <code>--config, -c PATH</code> - Path to the configuration file - <code>--stage-name, -s STAGE</code> - Name of a stage for stage-specific bumping - <code>--no-write, -n</code> - If set, the version will not be written to manifest files (dry run)</p> <p>Bumper Arguments: Arguments passed to the bumper can be in the format <code>key=value</code> or as a single positional argument for backward compatibility:</p> <pre><code># New key=value format\nvertagus bump level=patch\nvertagus bump level=minor\nvertagus bump level=major\n</code></pre> <p>Examples: <pre><code># Use without keywords with `semantic_commit` bumper to auto-detect bump level\nvertagus bump\n\n# Bump minor version with key=value syntax\nvertagus bump level=minor\n\n# Dry run - show what would be bumped without writing\nvertagus bump --no-write\n\n# Bump with custom configuration\nvertagus bump --config ./custom-config.yaml level=major\n</code></pre></p>"},{"location":"cli-reference/#vertagus-create-tag","title":"<code>vertagus create-tag</code>","text":"<p>Create git tags based on the current version.</p> <pre><code>vertagus create-tag [OPTIONS]\n</code></pre> <p>Options: - <code>--config, -c PATH</code> - Path to the configuration file (default: vertagus.toml in current directory) - <code>--stage-name, -s STAGE</code> - Name of a stage for stage-specific tagging - <code>--ref, -r REF</code> - An SCM ref that should be tagged (default: current commit)</p> <p>Examples: <pre><code># Create tags for current version and commit\nvertagus create-tag\n\n# Create tags for specific stage\nvertagus create-tag --stage-name prod\n\n# Tag a specific commit\nvertagus create-tag --ref abc123\n\n# Use custom configuration\nvertagus create-tag --config ./my-config.yaml\n</code></pre></p>"},{"location":"cli-reference/#vertagus-create-aliases","title":"<code>vertagus create-aliases</code>","text":"<p>Create alias tags based on configured aliases for a stage.</p> <pre><code>vertagus create-aliases [OPTIONS]\n</code></pre> <p>Options: - <code>--config, -c PATH</code> - Path to the configuration file (default: vertagus.toml in current directory) - <code>--stage-name, -s STAGE</code> - Name of a stage for stage-specific aliases - <code>--ref, -r REF</code> - An SCM ref that should be tagged (default: current commit)</p> <p>Examples: <pre><code># Create aliases for current version\nvertagus create-aliases\n\n# Create aliases for production stage (e.g., \"stable\", \"latest\")\nvertagus create-aliases --stage-name prod\n\n# Create aliases pointing to specific commit\nvertagus create-aliases --ref v1.2.3\n</code></pre></p>"},{"location":"cli-reference/#list-commands","title":"List Commands","text":"<p>These commands help you discover available components and configurations:</p>"},{"location":"cli-reference/#vertagus-list-rules","title":"<code>vertagus list-rules</code>","text":"<p>Display all available validation rules.</p> <pre><code>vertagus list-rules\n</code></pre> <p>Shows a table with: - Rule Name - The name used in configuration - Config Usage - Where to use it (<code>current</code> or <code>increment</code>) - Description - What the rule validates</p> <p>Example output: <pre><code>Rule Name              Config Usage    Description\nnot_empty             current         Version string must not be empty\nregex_mmp             current         Standard major.minor.patch format\nany_increment         increment       Any version increment is allowed\n</code></pre></p>"},{"location":"cli-reference/#vertagus-list-bumpers","title":"<code>vertagus list-bumpers</code>","text":"<p>Display all available version bumpers.</p> <pre><code>vertagus list-bumpers\n</code></pre> <p>Shows available bumper types that can be configured in your project.</p>"},{"location":"cli-reference/#vertagus-list-aliases","title":"<code>vertagus list-aliases</code>","text":"<p>Display all available alias types.</p> <pre><code>vertagus list-aliases\n</code></pre> <p>Shows available alias generators with descriptions: - Alias Name - The alias type name for configuration - Description - What kind of alias it creates</p>"},{"location":"cli-reference/#vertagus-list-manifests","title":"<code>vertagus list-manifests</code>","text":"<p>Display all supported manifest file types.</p> <pre><code>vertagus list-manifests\n</code></pre> <p>Shows supported manifest types: - Manifest Type - The type name for configuration - Description - What kind of manifest files are supported</p>"},{"location":"cli-reference/#vertagus-list-scms","title":"<code>vertagus list-scms</code>","text":"<p>Display all supported source control management systems.</p> <pre><code>vertagus list-scms\n</code></pre> <p>Shows available SCM providers (currently only <code>git</code> is supported).</p>"},{"location":"cli-reference/#configuration-file-discovery","title":"Configuration File Discovery","text":"<p>Vertagus automatically searches for configuration files in the current directory in this order:</p> <ol> <li><code>vertagus.toml</code></li> <li><code>vertagus.yml</code> </li> <li><code>vertagus.yaml</code></li> </ol> <p>You can override this by using the <code>--config</code> option with any command.</p>"},{"location":"cli-reference/#environment-variables","title":"Environment Variables","text":"<p>You can use environment variables to configure Vertagus:</p> <ul> <li><code>VERTAGUS_LOG_LEVEL</code> - Log level (DEBUG, INFO, WARNING, ERROR) - default: INFO</li> </ul>"},{"location":"cli-reference/#stage-specific-operations","title":"Stage-Specific Operations","text":"<p>Many commands support the <code>--stage-name</code> option to operate within the context of a specific stage:</p> <pre><code># Validate using production stage rules\nvertagus validate --stage-name prod\n\n# Bump version for development stage\nvertagus bump --stage-name dev\n\n# Create production tags and aliases\nvertagus create-tag --stage-name prod\nvertagus create-aliases --stage-name prod\n</code></pre> <p>Running commands with this flag will load any configuration that is specific only to that stage, as defined in your vertagus configuration file.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>Vertagus uses TOML or YAML for its configuration format. The configuration file should be placed in your project root and named either <code>vertagus.yaml</code>, <code>vertagus.yml</code>, or <code>vertagus.toml</code>.</p> <p>Configuration Format</p> <p>While both YAML and TOML are supported, we recommend using YAML for better readability and easier maintenance.</p>"},{"location":"configuration/#configuration-structure","title":"Configuration Structure","text":""},{"location":"configuration/#scm-section","title":"SCM Section","text":"<p>The <code>scm</code> section configures source control management settings:</p> <pre><code>scm:\n  type: \"git\"                    # SCM type (currently only \"git\" is supported)\n  tag_prefix: \"v\"               # Prefix for version tags (e.g., \"v1.0.0\")\n  version_strategy: \"branch\"    # Strategy: \"branch\" or \"tag\"\n  target_branch: \"main\"         # Target branch for version operations\n  manifest_path: \"./pyproject.toml\"    # Path to main manifest file\n  manifest_type: \"setuptools_pyproject\" # Type of manifest\n</code></pre>"},{"location":"configuration/#supported-manifest-types","title":"Supported Manifest Types","text":"<ul> <li><code>setuptools_pyproject</code> - Python projects using pyproject.toml</li> <li><code>package_json</code> - Node.js projects using package.json</li> <li><code>cargo_toml</code> - Rust projects using Cargo.toml</li> </ul>"},{"location":"configuration/#project-section","title":"Project Section","text":"<p>The <code>project</code> section defines versioning rules and stages:</p> <pre><code>project:\n  rules:\n    current: [\"not_empty\"]           # Rules for current version validation\n    increment: [\"any_increment\"]     # Rules for version increment validation\n    manifest_comparisons: []         # Additional comparison rules\n\n  stages:\n    # Development stage\n    dev:\n      rules:\n        current: [\"regex_dev_mmp\"]   # Allow dev versions like \"1.0.0-dev.1\"\n\n    # Beta/staging stage\n    beta:\n      aliases: [\"string:latest\"]      # Create \"latest\" tag alias\n      rules:\n        current: [\"regex_beta_mmp\"]   # Allow beta versions like \"1.0.0-beta.1\"\n\n    # Production stage\n    prod:\n      aliases: [\"string:stable\", \"string:latest\", \"major.minor\"]\n      rules:\n        current: [\"regex_mmp\"]        # Standard semver like \"1.0.0\"\n\n  manifests:\n    - type: \"setuptools_pyproject\"\n      path: \"./pyproject.toml\"\n      name: \"pyproject\"\n</code></pre>"},{"location":"configuration/#validation-rules","title":"Validation Rules","text":""},{"location":"configuration/#built-in-rules","title":"Built-in Rules","text":""},{"location":"configuration/#current-version-rules","title":"Current Version Rules","text":"<ul> <li><code>not_empty</code> - Version string must not be empty</li> <li><code>regex_mmp</code> - Standard major.minor.patch format (e.g., \"1.0.0\")</li> <li><code>regex_dev_mmp</code> - Development versions (e.g., \"1.0.0-dev.1\")</li> <li><code>regex_beta_mmp</code> - Beta versions (e.g., \"1.0.0-beta.1\")</li> </ul>"},{"location":"configuration/#increment-rules","title":"Increment Rules","text":"<ul> <li><code>any_increment</code> - Any version increment is allowed</li> <li><code>major_increment</code> - Only major version increments</li> <li><code>minor_increment</code> - Only minor version increments  </li> <li><code>patch_increment</code> - Only patch version increments</li> </ul>"},{"location":"configuration/#custom-rules","title":"Custom Rules","text":"<p>You can define custom validation rules using regular expressions:</p> <pre><code>project:\n  rules:\n    custom_rules:\n      my_version_pattern:\n        pattern: \"^\\\\d+\\\\.\\\\d+\\\\.\\\\d+(-rc\\\\d+)?$\"\n        description: \"Allows release candidate versions\"\n</code></pre>"},{"location":"configuration/#stage-configuration","title":"Stage Configuration","text":"<p>Stages allow you to define different versioning behaviors for different environments:</p>"},{"location":"configuration/#stage-properties","title":"Stage Properties","text":"<ul> <li><code>aliases</code> - Git tag aliases to create/maintain</li> <li><code>rules</code> - Validation rules specific to this stage</li> <li><code>bump_strategy</code> - How to bump versions in this stage</li> </ul>"},{"location":"configuration/#example-multi-stage-setup","title":"Example Multi-Stage Setup","text":"<pre><code>project:\n  stages:\n    # Development - allows pre-release versions\n    dev:\n      rules:\n        current: [\"regex_dev_mmp\"]\n      bump_strategy: \"prerelease\"\n\n    # Staging - beta versions only\n    staging:\n      aliases: [\"string:staging\"]\n      rules:\n        current: [\"regex_beta_mmp\"]\n      bump_strategy: \"prerelease\"\n\n    # Production - stable releases only\n    prod:\n      aliases: [\"string:stable\", \"string:latest\", \"major.minor\"]\n      rules:\n        current: [\"regex_mmp\"]\n      bump_strategy: \"release\"\n</code></pre>"},{"location":"configuration/#alias-configuration","title":"Alias Configuration","text":"<p>Aliases are additional git tags that point to specific versions:</p>"},{"location":"configuration/#string-aliases","title":"String Aliases","text":"<p><pre><code>aliases: [\"string:stable\", \"string:latest\"]\n</code></pre> Creates tags like <code>stable</code> and <code>latest</code>.</p>"},{"location":"configuration/#pattern-aliases","title":"Pattern Aliases","text":"<p><pre><code>aliases: [\"major.minor\", \"major\"]\n</code></pre> Creates tags like <code>1.2</code> (from version <code>1.2.3</code>) and <code>1</code> (from version <code>1.2.3</code>).</p>"},{"location":"configuration/#manifest-configuration","title":"Manifest Configuration","text":"<p>Configure multiple manifest files to keep in sync:</p> <pre><code>project:\n  manifests:\n    - type: \"setuptools_pyproject\"\n      path: \"./pyproject.toml\"\n      name: \"pyproject\"\n    - type: \"package_json\"\n      path: \"./frontend/package.json\"\n      name: \"frontend\"\n</code></pre>"},{"location":"configuration/#complete-example","title":"Complete Example","text":"<p>Here's the complete configuration from the Vertagus project itself:</p> <pre><code>scm:\n  type: \"git\"\n  tag_prefix: \"v\"\n  version_strategy: \"branch\"\n  target_branch: \"main\"\n  manifest_path: \"./pyproject.toml\"\n  manifest_type: \"setuptools_pyproject\"\n\nproject:\n  rules:\n    current: [\"not_empty\"]\n    increment: [\"any_increment\"]\n    manifest_comparisons: []\n\n  stages:\n    dev:\n      rules:\n        current: [\"regex_dev_mmp\"]\n\n    beta:\n      aliases: [\"string:latest\"]\n      rules:\n        current: [\"regex_beta_mmp\"]\n\n    prod:\n      aliases: [\"string:stable\", \"string:latest\", \"major.minor\"]\n      rules:\n        current: [\"regex_mmp\"]\n\n  manifests:\n    - type: \"setuptools_pyproject\"\n      path: \"./pyproject.toml\"\n      name: \"pyproject\"\n</code></pre>"},{"location":"configuration/#toml-format","title":"TOML Format","text":"<p>The same configuration in TOML format:</p> <pre><code>[scm]\ntype = \"git\"\ntag_prefix = \"v\"\nversion_strategy = \"branch\"\ntarget_branch = \"main\"\nmanifest_path = \"./pyproject.toml\"\nmanifest_type = \"setuptools_pyproject\"\n\n[project.rules]\ncurrent = [\"not_empty\"]\nincrement = [\"any_increment\"]\nmanifest_comparisons = []\n\n[project.stages.dev.rules]\ncurrent = [\"regex_dev_mmp\"]\n\n[project.stages.beta]\naliases = [\"string:latest\"]\n\n[project.stages.beta.rules]\ncurrent = [\"regex_beta_mmp\"]\n\n[project.stages.prod]\naliases = [\"string:stable\", \"string:latest\", \"major.minor\"]\n\n[project.stages.prod.rules]\ncurrent = [\"regex_mmp\"]\n\n[[project.manifests]]\ntype = \"setuptools_pyproject\"\npath = \"./pyproject.toml\"\nname = \"pyproject\"\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>We welcome contributions to Vertagus! This guide will help you get started with contributing to the project.</p>"},{"location":"contributing/#development-setup","title":"Development Setup","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>Git</li> <li>just for automation commands (See: https://github.com/casey/just)</li> </ul>"},{"location":"contributing/#setting-up-the-development-environment","title":"Setting up the Development Environment","text":"<ol> <li> <p>Fork and clone the repository: <pre><code>git clone https://github.com/your-username/vertagus.git\ncd vertagus\n</code></pre></p> </li> <li> <p>Create a virtual environment: <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install development dependencies: <pre><code>pip install -e \".[dev,docs]\"\n</code></pre></p> </li> <li> <p>Verify the installation: <pre><code>vertagus --help\npytest\n</code></pre></p> </li> </ol>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"contributing/#making-changes","title":"Making Changes","text":"<ol> <li> <p>Create a feature branch: <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make your changes following the project conventions</p> </li> <li> <p>Run tests: <pre><code>just test\n</code></pre></p> </li> <li> <p>Run quality checks: <pre><code>just lint-fix\njust format\n</code></pre></p> </li> <li> <p>Test documentation locally: <pre><code>just docs-serve\n</code></pre></p> </li> <li> <p>Commit your changes: <pre><code>git add .\ngit commit -m \"feat: add your feature description\"\n</code></pre></p> </li> </ol>"},{"location":"contributing/#commit-message-convention","title":"Commit Message Convention","text":"<p>We follow the Conventional Commits specification:</p> <ul> <li><code>feat:</code> - New features (minor bump)</li> <li><code>fix:</code> - Bug fixes (patch bump)</li> <li><code>docs:</code> - Documentation changes (patch bump)</li> <li><code>style:</code> - Code style changes (formatting, etc.) (patch bump)</li> <li><code>refactor:</code> - Code refactoring (patch bump)</li> <li><code>test:</code> - Adding or updating tests (patch bump)</li> <li><code>chore:</code> - Maintenance tasks (patch bump)</li> </ul> <p>Examples: <pre><code>feat: add support for Cargo.toml manifests \nfix: resolve version comparison edge case\ndocs: update configuration examples\ntest: add tests for semantic bumper\n</code></pre></p>"},{"location":"contributing/#testing","title":"Testing","text":""},{"location":"contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# Run with coverage\npytest --cov=vertagus\n\n# Run specific test file\npytest test/test_operations.py\n\n# Run tests with verbose output\npytest -v\n</code></pre>"},{"location":"contributing/#writing-tests","title":"Writing Tests","text":"<ul> <li>Place tests in the <code>test/</code> directory</li> <li>Follow the existing test structure and naming conventions</li> <li>Use descriptive test names that explain what is being tested</li> <li>Include both positive and negative test cases</li> <li>Mock external dependencies (git, file system) when appropriate</li> </ul> <p>Example test structure: <pre><code>def test_version_bump_increments_patch_version():\n    \"\"\"Test that bump operation correctly increments patch version.\"\"\"\n    # Arrange\n    initial_version = \"1.0.0\"\n\n    # Act\n    result = bump_version(initial_version, \"patch\")\n\n    # Assert\n    assert result == \"1.0.1\"\n</code></pre></p>"},{"location":"contributing/#documentation","title":"Documentation","text":""},{"location":"contributing/#building-documentation","title":"Building Documentation","text":"<p>The documentation is built using MkDocs with the Material theme:</p> <pre><code># Install docs dependencies\njust docs-install\n\n# Serve documentation locally\njust docs-serve\n\n# Build documentation\njust docs build\n</code></pre>"},{"location":"contributing/#documentation-guidelines","title":"Documentation Guidelines","text":"<ul> <li>Write clear, concise documentation</li> <li>Include code examples where appropriate</li> <li>Update relevant documentation when adding features</li> <li>Use proper Markdown formatting</li> <li>Test documentation examples to ensure they work</li> </ul>"},{"location":"contributing/#code-style","title":"Code Style","text":""},{"location":"contributing/#python-code-style","title":"Python Code Style","text":"<ul> <li>Generally follow PEP 8 guidelines</li> <li>Use type hints ubiquitously, but maintain compatibility with Python 3.9</li> <li>Keep line length under 120 characters</li> <li>Use meaningful variable and function names</li> <li>Limit docstrings; prefer readable tests</li> </ul>"},{"location":"contributing/#code-formatting-tools","title":"Code Formatting Tools","text":"<p>We primarily use ruff for linting and formatting.</p>"},{"location":"contributing/#contributing-guidelines","title":"Contributing Guidelines","text":""},{"location":"contributing/#before-submitting-a-pull-request","title":"Before Submitting a Pull Request","text":"<ol> <li>Check existing issues - It's best if your contribution addresses an existing issue or clearly describes a new problem/feature</li> <li>Run the full test suite - Ensure all tests pass</li> <li>Update documentation - Add or update relevant documentation</li> <li>Write/update tests - Include tests for new functionality</li> <li>Follow commit conventions - Use conventional commit messages</li> </ol>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create a pull request with a clear title and description</li> <li>Reference related issues using keywords like \"Closes #123\"</li> <li>Provide context - Explain why the change is needed</li> <li>Include testing information - Describe how you tested the changes</li> <li>Be responsive - Address feedback and questions promptly</li> </ol>"},{"location":"contributing/#pull-request-template","title":"Pull Request Template","text":"<pre><code>## Description\nBrief description of the changes\n\n## Related Issue\nCloses #123\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Documentation update\n- [ ] Refactoring\n- [ ] Other (describe)\n\n## Testing\n- [ ] Tests pass locally\n- [ ] Added/updated tests for changes\n- [ ] Manual testing performed\n\n## Documentation\n- [ ] Updated relevant documentation\n- [ ] Added docstrings for new functions\n</code></pre> <p>Thank you for contributing to Vertagus! Your contributions help make version management easier for everyone.</p>"},{"location":"examples/","title":"Examples","text":"<p>This page provides real-world examples of using Vertagus in different project scenarios.</p>"},{"location":"examples/#basic-python-project","title":"Basic Python Project","text":""},{"location":"examples/#setup","title":"Setup","text":"<p>For a simple Python project with semantic versioning:</p> <pre><code># vertagus.yaml\nscm:\n  type: \"git\"\n  tag_prefix: \"v\"\n  version_strategy: \"branch\"\n  target_branch: \"main\"\n  manifest_path: \"./pyproject.toml\"\n  manifest_type: \"setuptools_pyproject\"\n\nproject:\n  rules:\n    current: [\"not_empty\", \"regex_mmp\"]\n    increment: [\"any_increment\"]\n\n  manifests:\n    - type: \"setuptools_pyproject\"\n      path: \"./pyproject.toml\"\n      name: \"main\"\n</code></pre>"},{"location":"examples/#workflow","title":"Workflow","text":"<pre><code># 1. Check current version\nvertagus check\n\n# 2. Make changes and commit\ngit add .\ngit commit -m \"feat: add new feature\"\n\n# 3. Bump version automatically\nvertagus bump\n\n# 4. Create git tags\nvertagus tag --push\n</code></pre>"},{"location":"examples/#multi-stage-development","title":"Multi-Stage Development","text":""},{"location":"examples/#setup_1","title":"Setup","text":"<p>For projects with development, staging, and production stages:</p> <pre><code># vertagus.yaml\nscm:\n  type: \"git\"\n  tag_prefix: \"v\"\n  version_strategy: \"branch\"\n  target_branch: \"main\"\n  manifest_path: \"./pyproject.toml\"\n  manifest_type: \"setuptools_pyproject\"\n\nproject:\n  rules:\n    current: [\"not_empty\"]\n    increment: [\"any_increment\"]\n\n  stages:\n    dev:\n      rules:\n        current: [\"regex_dev_mmp\"]  # e.g., 1.0.0-dev.1\n\n    staging:\n      aliases: [\"string:staging\"]\n      rules:\n        current: [\"regex_beta_mmp\"]  # e.g., 1.0.0-beta.1\n\n    prod:\n      aliases: [\"string:stable\", \"string:latest\", \"major.minor\"]\n      rules:\n        current: [\"regex_mmp\"]  # e.g., 1.0.0\n\n  manifests:\n    - type: \"setuptools_pyproject\"\n      path: \"./pyproject.toml\"\n      name: \"main\"\n</code></pre>"},{"location":"examples/#development-workflow","title":"Development Workflow","text":"<pre><code># Development branch\ngit checkout develop\n\n# Bump development version\nvertagus bump --stage dev\n# Creates version like: 1.0.0-dev.1\n\n# Create development tags\nvertagus tag --stage dev\n</code></pre>"},{"location":"examples/#staging-workflow","title":"Staging Workflow","text":"<pre><code># Staging branch\ngit checkout staging\n\n# Bump to beta version\nvertagus bump --stage staging\n# Creates version like: 1.0.0-beta.1\n\n# Create staging tags\nvertagus tag --stage staging --push\n# Creates: v1.0.0-beta.1, staging\n</code></pre>"},{"location":"examples/#production-workflow","title":"Production Workflow","text":"<pre><code># Production branch\ngit checkout main\n\n# Bump to production version\nvertagus bump --stage prod\n# Creates version like: 1.0.0\n\n# Create production tags\nvertagus tag --stage prod --push\n# Creates: v1.0.0, stable, latest, 1.0\n</code></pre>"},{"location":"examples/#monorepo-with-multiple-services","title":"Monorepo with Multiple Services","text":""},{"location":"examples/#setup_2","title":"Setup","text":"<p>For a monorepo with multiple services that need independent versioning:</p> <pre><code># vertagus.yaml\nscm:\n  type: \"git\"\n  tag_prefix: \"\"  # No prefix for monorepo\n  version_strategy: \"branch\"\n  target_branch: \"main\"\n\nproject:\n  rules:\n    current: [\"not_empty\"]\n    increment: [\"any_increment\"]\n\n  manifests:\n    - type: \"setuptools_pyproject\"\n      path: \"./backend/pyproject.toml\"\n      name: \"backend\"\n    - type: \"package_json\"\n      path: \"./frontend/package.json\"\n      name: \"frontend\"\n    - type: \"cargo_toml\"\n      path: \"./worker/Cargo.toml\"\n      name: \"worker\"\n</code></pre>"},{"location":"examples/#service-specific-versioning","title":"Service-Specific Versioning","text":"<pre><code># Bump only backend\nvertagus bump --manifest backend\n\n# Bump only frontend\nvertagus bump --manifest frontend\n\n# Check all services\nvertagus status --detailed\n</code></pre>"},{"location":"examples/#continuous-integration","title":"Continuous Integration","text":""},{"location":"examples/#github-actions","title":"GitHub Actions","text":"<pre><code># .github/workflows/version.yml\nname: Version Management\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  version-check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0  # Need full history for version comparison\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n\n      - name: Install Vertagus\n        run: pip install vertagus\n\n      - name: Validate configuration\n        run: vertagus validate\n\n      - name: Check version\n        run: vertagus check\n\n      - name: Compare with main\n        run: vertagus compare --target origin/main\n\n  auto-release:\n    needs: version-check\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n\n      - name: Install Vertagus\n        run: pip install vertagus\n\n      - name: Auto-bump version\n        run: |\n          vertagus bump --commit\n          vertagus tag --push\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n</code></pre>"},{"location":"examples/#docker-integration","title":"Docker Integration","text":""},{"location":"examples/#dockerfile-with-version","title":"Dockerfile with Version","text":"<pre><code># Dockerfile\nFROM python:3.11-slim\n\n# Install Vertagus for version management\nRUN pip install vertagus\n\nWORKDIR /app\nCOPY . .\n\n# Get version from Vertagus and set as label\nRUN vertagus status --json &gt; /tmp/version.json\nRUN export VERSION=$(cat /tmp/version.json | python -c \"import sys, json; print(json.load(sys.stdin)['version'])\") &amp;&amp; \\\n    echo \"LABEL version=$VERSION\" &gt;&gt; /tmp/version.label\n\n# Install dependencies\nRUN pip install -e .\n\nCMD [\"python\", \"-m\", \"myapp\"]\n</code></pre>"},{"location":"examples/#docker-compose-with-version-tags","title":"Docker Compose with Version Tags","text":"<pre><code>#!/bin/bash\n# build-and-tag.sh\n\n# Get current version\nVERSION=$(vertagus status --json | python -c \"import sys, json; print(json.load(sys.stdin)['version'])\")\n\n# Build Docker image with version tag\ndocker build -t myapp:$VERSION .\ndocker build -t myapp:latest .\n\n# Push to registry\ndocker push myapp:$VERSION\ndocker push myapp:latest\n\necho \"Built and pushed myapp:$VERSION\"\n</code></pre>"},{"location":"examples/#release-automation","title":"Release Automation","text":""},{"location":"examples/#complete-release-script","title":"Complete Release Script","text":"<pre><code>#!/bin/bash\n# release.sh\n\nset -e\n\nSTAGE=${1:-prod}\n\necho \"Starting release process for stage: $STAGE\"\n\n# Validate current state\necho \"Validating configuration...\"\nvertagus validate\n\necho \"Checking current version...\"\nvertagus check --stage $STAGE\n\n# Bump version\necho \"Bumping version...\"\nNEW_VERSION=$(vertagus bump --stage $STAGE --dry-run | grep \"New version\" | cut -d: -f2 | tr -d ' ')\n\necho \"Bumping to version: $NEW_VERSION\"\nvertagus bump --stage $STAGE\n\n# Create commit and tags\necho \"Creating git commit...\"\ngit add .\ngit commit -m \"chore: bump version to $NEW_VERSION\"\n\necho \"Creating git tags...\"\nvertagus tag --stage $STAGE\n\n# Push changes\necho \"Pushing changes and tags...\"\ngit push origin main\ngit push origin --tags\n\necho \"Release $NEW_VERSION completed successfully!\"\n</code></pre>"},{"location":"examples/#custom-rules-example","title":"Custom Rules Example","text":""},{"location":"examples/#advanced-validation-rules","title":"Advanced Validation Rules","text":"<pre><code># vertagus.yaml with custom rules\nscm:\n  type: \"git\"\n  tag_prefix: \"v\"\n  version_strategy: \"branch\"\n  target_branch: \"main\"\n\nproject:\n  rules:\n    current: [\"not_empty\", \"custom_version_format\"]\n    increment: [\"semantic_increment\"]\n\n  custom_rules:\n    custom_version_format:\n      pattern: \"^\\\\d+\\\\.\\\\d+\\\\.\\\\d+(-[a-z]+\\\\d+)?$\"\n      description: \"Version must be semver with optional pre-release\"\n\n    semantic_increment:\n      pattern: \"major|minor|patch\"\n      description: \"Only semantic increments allowed\"\n\n  stages:\n    dev:\n      rules:\n        current: [\"regex_dev_mmp\", \"dev_branch_only\"]\n\n    prod:\n      aliases: [\"string:stable\", \"major.minor\"]\n      rules:\n        current: [\"regex_mmp\", \"no_prerelease\"]\n\n  manifests:\n    - type: \"setuptools_pyproject\"\n      path: \"./pyproject.toml\"\n      name: \"main\"\n</code></pre> <p>These examples demonstrate various ways to integrate Vertagus into different project workflows and CI/CD pipelines. Adapt them to your specific needs and project structure.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you get up and running with Vertagus quickly.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>Git repository for your project</li> <li>A project manifest file (e.g., <code>pyproject.toml</code>, <code>package.json</code>, etc.)</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#from-pypi","title":"From PyPI","text":"<pre><code>pip install vertagus\n</code></pre>"},{"location":"getting-started/#from-source","title":"From Source","text":"<pre><code>git clone https://github.com/jdraines/vertagus.git\ncd vertagus\npip install -e .\n</code></pre>"},{"location":"getting-started/#development-installation","title":"Development Installation","text":"<p>If you want to contribute to Vertagus or need the development dependencies:</p> <pre><code>pip install -e \".[dev,docs]\"\n</code></pre>"},{"location":"getting-started/#initial-setup","title":"Initial Setup","text":""},{"location":"getting-started/#1-initialize-configuration","title":"1. Initialize Configuration","text":"<p>Navigate to your project directory and run:</p> <pre><code>vertagus init\n</code></pre> <p>This will create a <code>vertagus.yaml</code> configuration file in your project root with sensible defaults.</p>"},{"location":"getting-started/#2-configure-your-project","title":"2. Configure Your Project","text":"<p>Edit the generated <code>vertagus.yaml</code> file to match your project structure. Here's a basic example:</p> <pre><code>scm:\n  type: \"git\"\n  tag_prefix: \"v\"\n  version_strategy: \"branch\"\n  target_branch: \"main\"\n  manifest_path: \"./pyproject.toml\"\n  manifest_type: \"setuptools_pyproject\"\n\nproject:\n  rules:\n    current: [\"not_empty\"]\n    increment: [\"any_increment\"]\n    manifest_comparisons: []\n\n  stages:\n    dev:\n      rules:\n        current: [\"regex_dev_mmp\"]\n\n    beta:\n      aliases: [\"string:latest\"]\n      rules:\n        current: [\"regex_beta_mmp\"]\n\n    prod:\n      aliases: [\"string:stable\", \"string:latest\", \"major.minor\"]\n      rules:\n        current: [\"regex_mmp\"]\n\n  manifests:\n    - type: \"setuptools_pyproject\"\n      path: \"./pyproject.toml\"\n      name: \"pyproject\"\n</code></pre>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/#check-current-version","title":"Check Current Version","text":"<p>To check if your current version is valid:</p> <pre><code>vertagus check\n</code></pre>"},{"location":"getting-started/#compare-versions","title":"Compare Versions","text":"<p>To compare your current version with what's in your SCM:</p> <pre><code>vertagus compare\n</code></pre>"},{"location":"getting-started/#bump-version","title":"Bump Version","text":"<p>To automatically bump your version:</p> <pre><code>vertagus bump\n</code></pre> <p>You can also specify the bump type:</p> <pre><code>vertagus bump --type patch\nvertagus bump --type minor\nvertagus bump --type major\n</code></pre>"},{"location":"getting-started/#create-tags","title":"Create Tags","text":"<p>To create git tags based on your current version:</p> <pre><code>vertagus tag\n</code></pre>"},{"location":"getting-started/#common-workflows","title":"Common Workflows","text":""},{"location":"getting-started/#development-workflow","title":"Development Workflow","text":"<ol> <li>Make your changes</li> <li>Commit with semantic commit messages (e.g., <code>feat: add new feature</code>)</li> <li>Run <code>vertagus bump</code> to automatically increment version</li> <li>Run <code>vertagus tag</code> to create git tags</li> <li>Push changes and tags</li> </ol>"},{"location":"getting-started/#release-workflow","title":"Release Workflow","text":"<ol> <li>Ensure you're on the target branch (usually <code>main</code>)</li> <li>Run <code>vertagus check</code> to validate current state</li> <li>Run <code>vertagus bump --stage prod</code> for production release</li> <li>Run <code>vertagus tag</code> to create release tags</li> <li>Push changes and tags</li> </ol>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Read the Configuration guide for detailed setup options</li> <li>Check out Examples for real-world usage scenarios</li> <li>Explore the CLI Reference for all available commands</li> <li>Review the API Reference if you need to integrate Vertagus programmatically</li> </ul>"},{"location":"mike-setup/","title":"Documentation Version Management with Mike","text":"<p>This project uses Mike for managing versioned documentation. Mike allows us to deploy multiple versions of our documentation and provides a version selector in the UI.</p>"},{"location":"mike-setup/#quick-start","title":"Quick Start","text":""},{"location":"mike-setup/#first-time-setup","title":"First Time Setup","text":"<ol> <li> <p>Install documentation dependencies:    <pre><code>just docs-install\n</code></pre></p> </li> <li> <p>Initialize Mike with the current version:    <pre><code>just docs-init\n</code></pre></p> </li> </ol> <p>This will: - Deploy the current version (from <code>pyproject.toml</code>) as both the version number and <code>latest</code> - Deploy a <code>dev</code> version for development documentation - Set <code>latest</code> as the default version</p>"},{"location":"mike-setup/#daily-development","title":"Daily Development","text":"<ul> <li>Serve docs locally: <code>just docs-serve</code></li> <li>Serve specific version: <code>just docs-serve-version dev</code></li> <li>Deploy dev version: <code>just docs-deploy dev</code></li> <li>List all versions: <code>just docs-list</code></li> </ul>"},{"location":"mike-setup/#release-process","title":"Release Process","text":"<p>When releasing a new version:</p> <ol> <li> <p>Deploy release version:    <pre><code>just docs-deploy-release 1.2.0\n</code></pre>    This will deploy version <code>1.2.0</code>, alias it as <code>latest</code>, and set it as the default.</p> </li> <li> <p>Or use the helper script:    <pre><code>just docs-mike release 1.2.0\n</code></pre></p> </li> </ol>"},{"location":"mike-setup/#available-commands","title":"Available Commands","text":""},{"location":"mike-setup/#justfile-commands","title":"Justfile Commands","text":"<ul> <li><code>just docs-serve</code> - Serve documentation locally</li> <li><code>just docs-serve-version VERSION</code> - Serve specific version locally  </li> <li><code>just docs-build</code> - Build documentation</li> <li><code>just docs-deploy VERSION</code> - Deploy specific version</li> <li><code>just docs-deploy-release VERSION</code> - Deploy version as latest release</li> <li><code>just docs-list</code> - List all deployed versions</li> <li><code>just docs-delete VERSION</code> - Delete a version</li> <li><code>just docs-set-default VERSION</code> - Set default version</li> <li><code>just docs-install</code> - Install documentation dependencies</li> <li><code>just docs-init</code> - Initialize Mike (first time setup)</li> <li><code>just docs-mike COMMAND</code> - Use the Mike helper script</li> </ul>"},{"location":"mike-setup/#mike-helper-script","title":"Mike Helper Script","text":"<p>The <code>scripts/mike-docs.sh</code> script provides additional convenience commands:</p> <pre><code># Initialize Mike\n./scripts/mike-docs.sh init\n\n# Deploy development docs\n./scripts/mike-docs.sh deploy-dev\n\n# Deploy a release version\n./scripts/mike-docs.sh release 1.0.0\n\n# List versions\n./scripts/mike-docs.sh list\n\n# Serve docs locally\n./scripts/mike-docs.sh serve [version]\n\n# Delete a version (with confirmation)\n./scripts/mike-docs.sh delete old-version\n\n# Set default version\n./scripts/mike-docs.sh set-default 1.0.0\n</code></pre>"},{"location":"mike-setup/#github-actions-integration","title":"GitHub Actions Integration","text":"<p>The documentation is automatically deployed via GitHub Actions using the helper script:</p> <ul> <li>On push to <code>main</code>: Runs <code>./scripts/mike-docs.sh deploy-dev</code> to deploy to the <code>dev</code> channel</li> <li>On tag push (e.g., <code>v1.0.0</code>): Runs <code>./scripts/mike-docs.sh release 1.0.0</code> to deploy as a versioned release and update <code>latest</code></li> <li>On pull requests: Builds documentation for preview (uploaded as artifact)</li> </ul> <p>The helper script automatically detects CI environments and includes the <code>--push</code> flag when needed.</p>"},{"location":"mike-setup/#version-management-strategy","title":"Version Management Strategy","text":"<ul> <li><code>latest</code>: Always points to the most recent stable release</li> <li><code>dev</code>: Development version, updated on every push to main</li> <li>Semantic versions (e.g., <code>1.0.0</code>, <code>1.1.0</code>): Tagged releases</li> <li><code>main</code>: Could be used for bleeding-edge development if needed</li> </ul>"},{"location":"mike-setup/#mkdocs-configuration","title":"MkDocs Configuration","text":"<p>The <code>mkdocs.yml</code> includes Mike-specific configuration:</p> <pre><code>extra:\n  version:\n    provider: mike\n    default: latest\n</code></pre> <p>This enables the version selector in the Material theme.</p>"},{"location":"mike-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"mike-setup/#first-time-setup-issues","title":"First Time Setup Issues","text":"<p>If you encounter issues during first-time setup:</p> <ol> <li>Ensure you have push access to the repository</li> <li>Make sure the <code>gh-pages</code> branch exists or can be created</li> <li>Check that Mike is installed: <code>pip show mike</code></li> </ol>"},{"location":"mike-setup/#version-not-showing","title":"Version Not Showing","text":"<p>If a version doesn't appear in the selector:</p> <ol> <li>Check if it was deployed: <code>just docs-list</code></li> <li>Verify the version exists in the <code>gh-pages</code> branch</li> <li>Clear browser cache and reload</li> </ol>"},{"location":"mike-setup/#local-development","title":"Local Development","text":"<p>For local development, you can use regular MkDocs commands:</p> <pre><code># Serve without versioning\nmkdocs serve\n\n# Build without versioning  \nmkdocs build\n</code></pre> <p>But for testing the version selector, use:</p> <pre><code># Serve with Mike (shows version selector)\nmike serve\n</code></pre>"}]}