{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Vertagus","text":"<p>Vertagus is a tool to enable automation around maintaining versions for your source code via a source control management tool like git. You can automate checks to compare the current code version string with version string(s) found on a specific branch of your repo or in repo tags, automate bumping based on semantic commit messages, and automate creating version tags in your git repo.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Semver version validation - Ensure your version strings follow semantic versioning</li> <li>Automated version bumping - Based on semantic commit messages or user configuration</li> <li>Multi-stage development - Support for different development stages (dev, staging, prod)</li> <li>Git tag automation - Create version tags and maintain alias tags like 'stable', 'latest'</li> <li>Flexible configuration - Support for TOML and YAML configuration formats</li> <li>Multiple manifest types - Works with various project manifest files</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<p>Install from PyPI:</p> <pre><code>pip install vertagus\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<ol> <li> <p>Initialize your project configuration:    <pre><code>vertagus init\n</code></pre></p> </li> <li> <p>Validate your current version:    <pre><code>vertagus validate\n</code></pre></p> </li> <li> <p>Bump your version:    <pre><code>vertagus bump\n</code></pre></p> </li> </ol>"},{"location":"#documentation-overview","title":"Documentation Overview","text":"<ul> <li>Getting Started - Learn how to set up and use Vertagus</li> <li>Configuration - Detailed configuration options</li> <li>CLI Reference - Complete command-line interface documentation</li> <li>Contributing - Contribution guide</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"cli-reference/","title":"CLI Reference","text":"<p>Vertagus provides a comprehensive command-line interface for version management. This page documents all available commands and their options.</p>"},{"location":"cli-reference/#global-options","title":"Global Options","text":"<p>These options are available for most commands:</p> <ul> <li><code>--config, -c PATH</code> - Path to configuration file (default: search for vertagus.yaml/yml/toml in current directory)</li> <li><code>--help</code> - Show help message and exit</li> </ul>"},{"location":"cli-reference/#commands","title":"Commands","text":""},{"location":"cli-reference/#vertagus-validate","title":"<code>vertagus validate</code>","text":"<p>Validate the current project version against configured rules.</p> <pre><code>vertagus validate [OPTIONS]\n</code></pre> <p>Options: - <code>--config, -c PATH</code> - Path to the configuration file - <code>--stage-name, -s STAGE</code> - Name of a stage to validate against - <code>--scm-branch, -b BRANCH</code> - Optional SCM branch to validate against (defaults to configured branch)</p> <p>Examples: <pre><code># Validate current version\nvertagus validate\n\n# Validate against production stage rules\nvertagus validate --stage-name prod\n\n# Validate against specific branch\nvertagus validate --scm-branch develop\n\n# Use specific configuration file\nvertagus validate --config ./my-config.yaml\n</code></pre></p> <p>Exit codes: - <code>0</code> - Validation successful - <code>1</code> - Validation failed</p>"},{"location":"cli-reference/#vertagus-bump","title":"<code>vertagus bump</code>","text":"<p>Increment the version number using configured bumpers.</p> <pre><code>vertagus bump [OPTIONS] [BUMPER_ARGS...]\n</code></pre> <p>Options: - <code>--config, -c PATH</code> - Path to the configuration file - <code>--stage-name, -s STAGE</code> - Name of a stage for stage-specific bumping - <code>--no-write, -n</code> - If set, the version will not be written to manifest files (dry run)</p> <p>Bumper Arguments: Arguments passed to the bumper can be in the format <code>key=value</code> or as a single positional argument for backward compatibility:</p> <pre><code># New key=value format\nvertagus bump level=patch\nvertagus bump level=minor\nvertagus bump level=major\n</code></pre> <p>Examples: <pre><code># Use without keywords with `semantic_commit` bumper to auto-detect bump level\nvertagus bump\n\n# Bump minor version with key=value syntax\nvertagus bump level=minor\n\n# Dry run - show what would be bumped without writing\nvertagus bump --no-write\n\n# Bump with custom configuration\nvertagus bump --config ./custom-config.yaml level=major\n</code></pre></p>"},{"location":"cli-reference/#vertagus-create-tag","title":"<code>vertagus create-tag</code>","text":"<p>Create git tags based on the current version.</p> <pre><code>vertagus create-tag [OPTIONS]\n</code></pre> <p>Options: - <code>--config, -c PATH</code> - Path to the configuration file (default: vertagus.toml in current directory) - <code>--stage-name, -s STAGE</code> - Name of a stage for stage-specific tagging - <code>--ref, -r REF</code> - An SCM ref that should be tagged (default: current commit)</p> <p>Examples: <pre><code># Create tags for current version and commit\nvertagus create-tag\n\n# Create tags for specific stage\nvertagus create-tag --stage-name prod\n\n# Tag a specific commit\nvertagus create-tag --ref abc123\n\n# Use custom configuration\nvertagus create-tag --config ./my-config.yaml\n</code></pre></p>"},{"location":"cli-reference/#vertagus-create-aliases","title":"<code>vertagus create-aliases</code>","text":"<p>Create alias tags based on configured aliases for a stage.</p> <pre><code>vertagus create-aliases [OPTIONS]\n</code></pre> <p>Options: - <code>--config, -c PATH</code> - Path to the configuration file (default: vertagus.toml in current directory) - <code>--stage-name, -s STAGE</code> - Name of a stage for stage-specific aliases - <code>--ref, -r REF</code> - An SCM ref that should be tagged (default: current commit)</p> <p>Examples: <pre><code># Create aliases for current version\nvertagus create-aliases\n\n# Create aliases for production stage (e.g., \"stable\", \"latest\")\nvertagus create-aliases --stage-name prod\n\n# Create aliases pointing to specific commit\nvertagus create-aliases --ref v1.2.3\n</code></pre></p>"},{"location":"cli-reference/#list-commands","title":"List Commands","text":"<p>These commands help you discover available components and configurations:</p>"},{"location":"cli-reference/#vertagus-list-rules","title":"<code>vertagus list-rules</code>","text":"<p>Display all available validation rules.</p> <pre><code>vertagus list-rules\n</code></pre> <p>Shows a table with: - Rule Name - The name used in configuration - Config Usage - Where to use it (<code>current</code> or <code>increment</code>) - Description - What the rule validates</p> <p>Example output: <pre><code>Rule Name              Config Usage    Description\nnot_empty             current         Version string must not be empty\nregex_mmp             current         Standard major.minor.patch format\nany_increment         increment       Any version increment is allowed\n</code></pre></p>"},{"location":"cli-reference/#vertagus-list-bumpers","title":"<code>vertagus list-bumpers</code>","text":"<p>Display all available version bumpers.</p> <pre><code>vertagus list-bumpers\n</code></pre> <p>Shows available bumper types that can be configured in your project.</p>"},{"location":"cli-reference/#vertagus-list-aliases","title":"<code>vertagus list-aliases</code>","text":"<p>Display all available alias types.</p> <pre><code>vertagus list-aliases\n</code></pre> <p>Shows available alias generators with descriptions: - Alias Name - The alias type name for configuration - Description - What kind of alias it creates</p>"},{"location":"cli-reference/#vertagus-list-manifests","title":"<code>vertagus list-manifests</code>","text":"<p>Display all supported manifest file types.</p> <pre><code>vertagus list-manifests\n</code></pre> <p>Shows supported manifest types: - Manifest Type - The type name for configuration - Description - What kind of manifest files are supported</p>"},{"location":"cli-reference/#vertagus-list-scms","title":"<code>vertagus list-scms</code>","text":"<p>Display all supported source control management systems.</p> <pre><code>vertagus list-scms\n</code></pre> <p>Shows available SCM providers (currently only <code>git</code> is supported).</p>"},{"location":"cli-reference/#configuration-file-discovery","title":"Configuration File Discovery","text":"<p>Vertagus automatically searches for configuration files in the current directory in this order:</p> <ol> <li><code>vertagus.toml</code></li> <li><code>vertagus.yml</code> </li> <li><code>vertagus.yaml</code></li> </ol> <p>You can override this by using the <code>--config</code> option with any command.</p>"},{"location":"cli-reference/#environment-variables","title":"Environment Variables","text":"<p>You can use environment variables to configure Vertagus:</p> <ul> <li><code>VERTAGUS_LOG_LEVEL</code> - Log level (DEBUG, INFO, WARNING, ERROR) - default: INFO</li> </ul>"},{"location":"cli-reference/#stage-specific-operations","title":"Stage-Specific Operations","text":"<p>Many commands support the <code>--stage-name</code> option to operate within the context of a specific stage:</p> <pre><code># Validate using production stage rules\nvertagus validate --stage-name prod\n\n# Bump version for development stage\nvertagus bump --stage-name dev\n\n# Create production tags and aliases\nvertagus create-tag --stage-name prod\nvertagus create-aliases --stage-name prod\n</code></pre> <p>Running commands with this flag will load any configuration that is specific only to that stage, as defined in your vertagus configuration file.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>Vertagus uses TOML or YAML for its configuration format. The configuration file should be placed in your project root and named either <code>vertagus.yaml</code>, <code>vertagus.yml</code>, or <code>vertagus.toml</code>.</p> <p>Configuration Format</p> <p>While both YAML and TOML are supported, we recommend using YAML for better readability and easier maintenance.</p>"},{"location":"configuration/#configuration-structure","title":"Configuration Structure","text":""},{"location":"configuration/#scm-section","title":"SCM Section","text":"<p>The <code>scm</code> section configures source control management settings:</p> <pre><code>scm:\n  type: \"git\"                   # SCM type (currently only \"git\" is supported)\n  tag_prefix: \"v\"               # Prefix for version tags (e.g., \"v1.0.0\")\n  version_strategy: \"branch\"    # Strategy: \"branch\" or \"tag\"\n  target_branch: \"main\"         # Target branch for version operations\n  manifest_path: \"./package.json\"    # Path to main manifest file\n  manifest_type: \"json\"         # Type of manifest\n  manifest_loc: \"version\"       # A dot-separated path indicating the location of the version within the manifest's object structure\n</code></pre>"},{"location":"configuration/#supported-manifest-types","title":"Supported Manifest Types","text":"<ul> <li><code>toml</code> </li> <li><code>yaml</code></li> <li><code>json</code></li> <li><code>setuptools_pyproject</code> - Python projects using pyproject.toml</li> </ul>"},{"location":"configuration/#project-section","title":"Project Section","text":"<p>The <code>project</code> section defines versioning rules and stages:</p> <pre><code>project:\n  rules:\n    current: [\"not_empty\"]           # Rules for current version validation\n    increment: [\"any_increment\"]     # Rules for version increment validation\n    manifest_comparisons: []         # Additional comparison rules to ensure version numbers in two manifests are in sync\n\n  stages:\n    # Development stage\n    dev:\n      rules:\n        current: [\"regex_dev_mmp\"]   # Allow dev versions like \"1.0.0.dev0\"\n\n    # Beta/staging stage\n    beta:\n      aliases: [\"string:latest\"]      # Create \"latest\" tag alias\n      rules:\n        current: [\"regex_beta_mmp\"]   # Allow beta versions like \"1.0.0.b1\"\n\n    # Production stage\n    prod:\n      aliases: [\"string:stable\", \"string:latest\", \"major.minor\"]\n      rules:\n        current: [\"regex_mmp\"]        # Standard semver like \"1.0.0\"\n\n  manifests:\n    - type: \"setuptools_pyproject\"\n      path: \"./pyproject.toml\"\n      name: \"pyproject\"\n</code></pre>"},{"location":"configuration/#validation-rules","title":"Validation Rules","text":""},{"location":"configuration/#built-in-rules","title":"Built-in Rules","text":""},{"location":"configuration/#current-version-rules","title":"Current Version Rules","text":"<ul> <li><code>not_empty</code> - Version string must not be empty</li> <li><code>regex_mmp</code> - Standard major.minor.patch format (e.g., \"1.0.0\")</li> <li><code>regex_dev_mmp</code> - Development versions (e.g., \"1.0.0.dev0\")</li> <li><code>regex_beta_mmp</code> - Beta versions (e.g., \"1.0.0.b0\")</li> </ul>"},{"location":"configuration/#increment-rules","title":"Increment Rules","text":"<ul> <li><code>any_increment</code> - Any version increment is allowed</li> <li><code>major_increment</code> - Only major version increments</li> <li><code>minor_increment</code> - Only minor version increments  </li> <li><code>patch_increment</code> - Only patch version increments</li> </ul>"},{"location":"configuration/#stage-configuration","title":"Stage Configuration","text":"<p>Stages allow you to define different versioning behaviors for different environments:</p>"},{"location":"configuration/#stage-properties","title":"Stage Properties","text":"<ul> <li><code>aliases</code> - Git tag aliases to create/maintain</li> <li><code>rules</code> - Validation rules specific to this stage</li> </ul>"},{"location":"configuration/#example-multi-stage-setup","title":"Example Multi-Stage Setup","text":"<pre><code>project:\n  stages:\n    # Development - allows pre-release versions\n    dev:\n      rules:\n        current: [\"regex_dev_mmp\"]\n\n    # Staging - beta versions only\n    staging:\n      aliases: [\"string:staging\"]\n      rules:\n        current: [\"regex_beta_mmp\"]\n\n    # Production - stable releases only\n    prod:\n      aliases: [\"string:stable\", \"string:latest\", \"major.minor\"]\n      rules:\n        current: [\"regex_mmp\"]\n</code></pre>"},{"location":"configuration/#alias-configuration","title":"Alias Configuration","text":"<p>Aliases are additional git tags that point to specific versions:</p>"},{"location":"configuration/#string-aliases","title":"String Aliases","text":"<p><pre><code>aliases: [\"string:stable\", \"string:latest\"]\n</code></pre> Creates tags like <code>stable</code> and <code>latest</code>.</p>"},{"location":"configuration/#pattern-aliases","title":"Pattern Aliases","text":"<p><pre><code>aliases: [\"major.minor\", \"major\"]\n</code></pre> Creates tags like <code>1.2</code> (from version <code>1.2.3</code>) and <code>1</code> (from version <code>1.2.3</code>).</p>"},{"location":"configuration/#manifest-configuration","title":"Manifest Configuration","text":"<p>Configure multiple manifest files to keep in sync:</p> <pre><code>project:\n  manifests:\n    - type: \"setuptools_pyproject\"\n      path: \"./pyproject.toml\"\n      name: \"pyproject\"\n    - type: \"package_json\"\n      path: \"./frontend/package.json\"\n      name: \"frontend\"\n</code></pre>"},{"location":"configuration/#complete-example","title":"Complete Example","text":"<p>Here's the complete configuration from the Vertagus project itself:</p> <pre><code>scm:\n  type: \"git\"\n  tag_prefix: \"v\"\n  version_strategy: \"branch\"\n  target_branch: \"main\"\n  manifest_path: \"./pyproject.toml\"\n  manifest_type: \"setuptools_pyproject\"\n\nproject:\n  rules:\n    current: [\"not_empty\"]\n    increment: [\"any_increment\"]\n    manifest_comparisons: []\n\n  stages:\n    dev:\n      rules:\n        current: [\"regex_dev_mmp\"]\n\n    beta:\n      aliases: [\"string:latest\"]\n      rules:\n        current: [\"regex_beta_mmp\"]\n\n    prod:\n      aliases: [\"string:stable\", \"string:latest\", \"major.minor\"]\n      rules:\n        current: [\"regex_mmp\"]\n\n  manifests:\n    - type: \"setuptools_pyproject\"\n      path: \"./pyproject.toml\"\n      name: \"pyproject\"\n</code></pre>"},{"location":"configuration/#toml-format","title":"TOML Format","text":"<p>The same configuration in TOML format:</p> <pre><code>[scm]\ntype = \"git\"\ntag_prefix = \"v\"\nversion_strategy = \"branch\"\ntarget_branch = \"main\"\nmanifest_path = \"./pyproject.toml\"\nmanifest_type = \"setuptools_pyproject\"\n\n[project.rules]\ncurrent = [\"not_empty\"]\nincrement = [\"any_increment\"]\nmanifest_comparisons = []\n\n[project.stages.dev.rules]\ncurrent = [\"regex_dev_mmp\"]\n\n[project.stages.beta]\naliases = [\"string:latest\"]\n\n[project.stages.beta.rules]\ncurrent = [\"regex_beta_mmp\"]\n\n[project.stages.prod]\naliases = [\"string:stable\", \"string:latest\", \"major.minor\"]\n\n[project.stages.prod.rules]\ncurrent = [\"regex_mmp\"]\n\n[[project.manifests]]\ntype = \"setuptools_pyproject\"\npath = \"./pyproject.toml\"\nname = \"pyproject\"\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>We welcome contributions to Vertagus! This guide will help you get started with contributing to the project.</p>"},{"location":"contributing/#development-setup","title":"Development Setup","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>Git</li> <li>just for automation commands (See: https://github.com/casey/just)</li> </ul>"},{"location":"contributing/#setting-up-the-development-environment","title":"Setting up the Development Environment","text":"<ol> <li> <p>Fork and clone the repository: <pre><code>git clone https://github.com/your-username/vertagus.git\ncd vertagus\n</code></pre></p> </li> <li> <p>Create a virtual environment: <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install development dependencies: <pre><code>pip install -e \".[dev,docs]\"\n</code></pre></p> </li> <li> <p>Verify the installation: <pre><code>vertagus --help\npytest\n</code></pre></p> </li> </ol>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"contributing/#making-changes","title":"Making Changes","text":"<ol> <li> <p>Create a feature branch: <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make your changes following the project conventions</p> </li> <li> <p>Run tests: <pre><code>just test\n</code></pre></p> </li> <li> <p>Run quality checks: <pre><code>just lint-fix\njust format\n</code></pre></p> </li> <li> <p>Test documentation locally: <pre><code>just docs-serve\n</code></pre></p> </li> <li> <p>Commit your changes: <pre><code>git add .\ngit commit -m \"feat: add your feature description\"\n</code></pre></p> </li> </ol>"},{"location":"contributing/#commit-message-convention","title":"Commit Message Convention","text":"<p>We follow the Conventional Commits specification:</p> <ul> <li><code>feat:</code> - New features (minor bump)</li> <li><code>fix:</code> - Bug fixes (patch bump)</li> <li><code>docs:</code> - Documentation changes (patch bump)</li> <li><code>style:</code> - Code style changes (formatting, etc.) (patch bump)</li> <li><code>refactor:</code> - Code refactoring (patch bump)</li> <li><code>test:</code> - Adding or updating tests (patch bump)</li> <li><code>chore:</code> - Maintenance tasks (patch bump)</li> </ul> <p>Examples: <pre><code>feat: add support for Cargo.toml manifests \nfix: resolve version comparison edge case\ndocs: update configuration examples\ntest: add tests for semantic bumper\n</code></pre></p>"},{"location":"contributing/#testing","title":"Testing","text":""},{"location":"contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# Run with coverage\npytest --cov=vertagus\n\n# Run specific test file\npytest test/test_operations.py\n\n# Run tests with verbose output\npytest -v\n</code></pre>"},{"location":"contributing/#writing-tests","title":"Writing Tests","text":"<ul> <li>Place tests in the <code>test/</code> directory</li> <li>Follow the existing test structure and naming conventions</li> <li>Use descriptive test names that explain what is being tested</li> <li>Include both positive and negative test cases</li> <li>Mock external dependencies (git, file system) when appropriate</li> </ul> <p>Example test structure: <pre><code>def test_version_bump_increments_patch_version():\n    \"\"\"Test that bump operation correctly increments patch version.\"\"\"\n    # Arrange\n    initial_version = \"1.0.0\"\n\n    # Act\n    result = bump_version(initial_version, \"patch\")\n\n    # Assert\n    assert result == \"1.0.1\"\n</code></pre></p>"},{"location":"contributing/#documentation","title":"Documentation","text":""},{"location":"contributing/#building-documentation","title":"Building Documentation","text":"<p>The documentation is built using MkDocs with the Material theme:</p> <pre><code># Install docs dependencies\njust docs-install\n\n# Serve documentation locally\njust docs-serve\n\n# Build documentation\njust docs build\n</code></pre>"},{"location":"contributing/#documentation-guidelines","title":"Documentation Guidelines","text":"<ul> <li>Write clear, concise documentation</li> <li>Include code examples where appropriate</li> <li>Update relevant documentation when adding features</li> <li>Use proper Markdown formatting</li> <li>Test documentation examples to ensure they work</li> </ul>"},{"location":"contributing/#code-style","title":"Code Style","text":""},{"location":"contributing/#python-code-style","title":"Python Code Style","text":"<ul> <li>Generally follow PEP 8 guidelines</li> <li>Use type hints ubiquitously, but maintain compatibility with Python 3.9</li> <li>Keep line length under 120 characters</li> <li>Use meaningful variable and function names</li> <li>Limit docstrings; prefer readable tests</li> </ul>"},{"location":"contributing/#code-formatting-tools","title":"Code Formatting Tools","text":"<p>We primarily use ruff for linting and formatting.</p>"},{"location":"contributing/#contributing-guidelines","title":"Contributing Guidelines","text":""},{"location":"contributing/#before-submitting-a-pull-request","title":"Before Submitting a Pull Request","text":"<ol> <li>Check existing issues - It's best if your contribution addresses an existing issue or clearly describes a new problem/feature</li> <li>Run the full test suite - Ensure all tests pass</li> <li>Update documentation - Add or update relevant documentation</li> <li>Write/update tests - Include tests for new functionality</li> <li>Follow commit conventions - Use conventional commit messages</li> </ol>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create a pull request with a clear title and description</li> <li>Reference related issues using keywords like \"Closes #123\"</li> <li>Provide context - Explain why the change is needed</li> <li>Include testing information - Describe how you tested the changes</li> <li>Be responsive - Address feedback and questions promptly</li> </ol>"},{"location":"contributing/#pull-request-template","title":"Pull Request Template","text":"<pre><code>## Description\nBrief description of the changes\n\n## Related Issue\nCloses #123\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Documentation update\n- [ ] Refactoring\n- [ ] Other (describe)\n\n## Testing\n- [ ] Tests pass locally\n- [ ] Added/updated tests for changes\n- [ ] Manual testing performed\n\n## Documentation\n- [ ] Updated relevant documentation\n- [ ] Added docstrings for new functions\n</code></pre> <p>Thank you for contributing to Vertagus! Your contributions help make version management easier for everyone.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you get up and running with Vertagus quickly.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>Git repository for your project</li> <li>A project manifest file (e.g., <code>pyproject.toml</code>, <code>package.json</code>, etc.)</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#from-pypi","title":"From PyPI","text":"<pre><code>pip install vertagus\n</code></pre>"},{"location":"getting-started/#from-source","title":"From Source","text":"<pre><code>git clone https://github.com/jdraines/vertagus.git\ncd vertagus\npip install -e .\n</code></pre>"},{"location":"getting-started/#development-installation","title":"Development Installation","text":"<p>If you want to contribute to Vertagus or need the development dependencies:</p> <pre><code>pip install -e \".[dev,docs]\"\n</code></pre>"},{"location":"getting-started/#initial-setup","title":"Initial Setup","text":""},{"location":"getting-started/#1-initialize-configuration","title":"1. Initialize Configuration","text":"<p>Navigate to your project directory and run:</p> <pre><code>vertagus init\n</code></pre> <p>This will create a <code>vertagus.yaml</code> configuration file in your project root with sensible defaults.</p>"},{"location":"getting-started/#2-configure-your-project","title":"2. Configure Your Project","text":"<p>Edit the generated <code>vertagus.yaml</code> file to match your project structure. Here's a basic example:</p> <pre><code>scm:\n  type: \"git\"\n  tag_prefix: \"v\"\n  version_strategy: \"branch\"\n  target_branch: \"main\"\n  manifest_path: \"./package.json\"\n  manifest_type: \"json\"\n  manifest_loc: \"version\"\n\nproject:\n  rules:\n    current: [\"not_empty\"]\n    increment: [\"any_increment\"]\n    manifest_comparisons: []\n\n  stages:\n    dev:\n      rules:\n        current: [\"regex_dev_mmp\"]\n\n    prod:\n      aliases: [\"string:stable\", \"string:latest\", \"major.minor\"]\n      rules:\n        current: [\"regex_mmp\"]\n\n  manifests:\n    - type: \"json\"\n      path: \"./package.json\"\n      loc: \"version\"\n      name: \"package.json\"\n</code></pre>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/#validate-version","title":"Validate version","text":"<p>Check that the version declared in your current working codebase satisfies the rules you've configured:</p> <pre><code>vertagus validate\n</code></pre>"},{"location":"getting-started/#bump-version","title":"Bump Version","text":"<p>To automatically bump your version, which will change the version in your manifest file:</p> <pre><code>vertagus bump\n</code></pre> <p>You can also specify the bump type:</p> <pre><code>vertagus bump level=minor\n</code></pre>"},{"location":"getting-started/#create-tags","title":"Create Tags","text":"<p>To create git tags based on your current version:</p> <pre><code>vertagus create-tag\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Read the Configuration guide for detailed setup options</li> <li>Explore the CLI Reference for all available commands</li> </ul>"}]}